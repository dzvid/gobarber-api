Escopo do projeto: Construir uma aplicação de serviços de beleza. Possui dois usuários:
o provedor do serviço(provider) e o cliente.

1. Inicia o projeto:
  yarn init -y
2. Cria a estrutura básica do projeto:
  src/
      app.js (Configuração do servidor express, configura as rotas e middlewares)
      routes.js (Rotas da aplicação (Parte de roteamento do express, usando o Router))
      server.js (Cria o servidor de fato(instância))

  O Diego comenta que no backend normalmente ele implementa as classes.
  Já no frontend ele não tem o costume de usar classes.

3.
  -  Cria a classe da App da aplicação no app.js
  e implementa os métodos necessários (middlewares e routes).
  - Configuramos nossas rotas no routes.js
  - Implementamos o servidor no server.js

4. Configuramos o Node para interpretar a nova sintaxe do Javascript (ES6+).
  Para isto usaremos o Sucrase. Configuramos o nodemon também.
  Ambos como dependencia de desenvolvimento:
  yarn add sucrase nodemon -D

5. Configuramos o projeto para executar com o Sucrase
  (na vdd configuramos o sucrase pra transpilar nosso código):

  yarn sucrase-node src/server.js

  mas é melhor criarmos um script junto com o nodemon:
  5.1 Criamos o script no package.json:
       "dev": "nodemon src/server.js"
  5.2 Configuramos o nodemon para usar o sucrase e não o node para arquivos javascript,
  criando um arquivo de configuração nodemon.json na raiz do projeto, contendo:
    {
      "execMap":{
        "js": "sucrase-node"
      }
    }

Aula do docker:
6. Instalar o docker.

7. Instalamos os nossos serviços no docker:
  7.1 Instalando PostgreSQL:
    docker pull postgres

    7.1.1 Criei um container pro banco de dados da aplicação, chamei o container de 'container_db_gobarber':
      docker run --name container_db_gobarber -e POSTGRES_PASSWORD=gobarberdev -p 5432:5432 -d postgres
      container_db_gobarber.: Nome do container
      gobarberdev.: Senha para do usuario postgres do banco de dados
      -p 5432:5432.: Redirecionamento da porta do localhost:container
      -d postgres.: Nome da imagem que quer utilizar

    7.1.2 Instalou o Postbird (GUI pra gerenciar o PostgreSQL).

    7.1.3 Criou o banco de dados (schema): 'gobarber'

Aula Sequelize e MVC
8. Explica sobre ORM (especificamente usando o Sequelize) e padrão MVC

Aula ESLint, Prettier e editorConfig
(Prettier fazer a formatação e o ESLint cuidar das regras,
editorConfig definir padrão de config de editor pro time de dev)
9. Configurando ferramentas para ditar o padrão de código
  9.1 Instalar o ESLint como dependencia de desenvolvimento
    yarn add eslint -D

    9.1.1 Configuramos o ESLint
      yarn eslint --init

      - Seleciona: To check syntax, find problems, and enforce code style
      - Seleciona: javascript modules (import/export)
      - Seleciona o framework: no caso não to usando nenhum no momento
      - Seleciona ambiente de execução: node
      - Seleciona style guide: Use a popular style guide -> Airbnb
      - Seleciona formato do arquivo config: Javascript
      - seleciona se quer instalar agora: Y

    9.1.2 Configura o linter para 'consertar' o código automaticamente
    quando salvar o arquivo, adicionando a linha abaixo no arquivo de configuração do
    vscode (nas preferências).

    9.1.3 Configura o .eslintrc.js para sobrescrever algumas regras do airbnb:
        rules: {
          "class-methods-use-this": "off",
          "no-param-reassign": "off",
          camelcase: "off",
          "no-unused-vars": ["error", { argsIgnorePattern: "next" }]
        }

  9.2 Instalar o Prettier:
    yarn add prettier eslint-config-prettier eslint-plugin-prettier -D

    9.2.1 Adiciono o prettier nos 'extends' e como 'plugins' e como uma
    nova regra no .eslintrc.js:
        extends: ["airbnb-base", "prettier"],
        plugins: ["prettier"],
        rules: {
          "prettier/prettier": "error",
          "class-methods-use-this": "off",
          "no-param-reassign": "off",
          camelcase: "off",
          "no-unused-vars": ["error", { argsIgnorePattern: "next" }]
        }

    9.2.2 Crio um arquivo .prettierrc para sobrescrever regras que estão conflitando
    com as do airbnb:
        {
          "singleQuote": true,
          "trailingComma": "es5"
        }

  9.3 Pode fazer o eslint ajustar todos os arquivos Javascript do projeto de acorodo com
  o padrão definido no projeto com o comando abaixo:
    yarn eslint --fix **diretorio** --ext .js

  9.4 Instala o plugin EditorConfig no vscode (serve pra quando a equipe usa editores
  de código diferemtes, tipo Atom, sublime, etc), depois de instalar: Vai na raiz do projeto
  e gera o arquivo .editorconfig

Aula configuração do sequelize
10. Cria pasta config dentro de src.
  10.1 Dentro da pasta config, Cria o arquivo de configuração das bases de dados (contém as credencias
  para acesso à base de dados):
    database.js

12. Cria pasta database dentro de src:
  12.1 Dentro da pasta database, crio a pasta migrations e seeds.

14. Dentro da pasta src, crio a pasta app
  A pasta app conterá a maioria do código que envolve regra de negócio da aplicação.
 14.1 Dentro da pasta app, crio a pasta controllers e models.

  Resumo da estrutura do projeto:
  src/
    app.js
    routes.js
    server.js
    app/
      controllers
      models
    config/
      database.js
    database/
      migrations/
      seeds/

15. Instalo o sequelize
  yarn add sequelize

16. Instalo o sequelize-cli como dependencia de desenvolvimento:
  yarn add sequelize-cli -D

17. Crio o arquivo .sequelizerc (exporta o caminho e pastas criados anteriormente)
  O 'resolve' importado serve para padronizar o path (tanto em OSX, Windows, Linux)
  O arquivo fica da seguinte forma:

    const { resolve } = require('path');
    module.exports = {
      config: resolve(__dirname, 'src', 'config', 'database.js'),
      'models-path': resolve(__dirname, 'src', 'app', 'models'),
      'migrations-path': resolve(__dirname, 'src', 'database', 'migrations'),
      'seeds-path': resolve(__dirname, 'src', 'database', 'seeds'),
    };

16. Instalamos as dependencias para usar o PostgreSQL (pode ser necessário uma versão especifica):
  yarn add pg pg-hstore

17. Editamos arquivo src/config/database.js:
  module.exports = {
    dialect: 'postgres',
    host: 'localhost',
    username: 'postgres',
    password: 'gobarberdev'
    database: 'gobarber',
    define: {
      timestamps: true, //serve pra colocar as timestamps: createdAt e updatedAt
      underscored: true, // Serve para o sequelize criar os models(tabelas) com padrão snake case
      underscoredAll: true, // Serve para o sequelize criar as colunas e relacionamentos com padrão snake case
    },
  };

  *-* Assim finalizou a configuração do sequelize ;) *-*

Aula criando Migration de usuário
18. Vamos criar a nossa primeira migration
que criará a tabela de usuários:
  yarn sequelize migration:create --name=create-users

  18.1 Após finalizar a migration, podemos executá-la:
    yarn sequelize db:migrate
  Como resultado teremos a tabela 'users' criada na base de dados.
    PS: Para desfazer uma migration:
      yarn sequelize db:migration:undo (desfaz a ultima migration)
        ou
      db:migration:undo:all (desfaz todas migrations)

Aula Criando Model de usuario
19. O model vai ser utilizado para manipular os dados do usuário (um CRUD):
  19.1 Criar arquivo User.js na pasta models;

Aula Criando loader de models
20. Criar o loader index.js na pasta database.

  20.1 Importamos o loader no app.js
  Podemos testá-lo na rota

Aula (implementando a feature) Criação e registro de usuários:
21. Criamos o controller UserController.js
  21.1 Importamos o model de usuário

  21.2 Associamos a rota ao controller

Aula - Gerando hash de senha
22. Para gerar o hash da senha vamos utilizar o módulo bcryptjs:
  yarn add bcryptjs

  22.1 Importamos o bcryptjs no model de usuario

  22.2 Criamos um campo password no model do tipo VIRTUAL (um campo que nunca existe
  do lado da base de dados, existindo apenas no código da aplicação)

  22.3 Adicionamos um Hook no sequelize (Hooks são trechos de código que são executados de forma
  automática baseado em ações que ocorrem no model)

Aula - Conceitos de JWT

Aula - Autenticação JWT
23. Vamos criar a autenticação do usuário (nova feature)
  23.1 Criamos um controller para sessões, chamado SessionController.js
  (Se estivessemos modelando via UML seria a entidade Sessão)

  23.2 Importamos nosso model de usuario no SessionController

  23.3 Instalamos o modulo jsonwebtoken, responsável por gerar o token JWT:
    yarn add jsonwebtoken

  23.4 Verifico se o usuario e senha são validos para criar a seção (a validação da senha
  foi implementada como um método no model de usuario), depois gero a resposta à requisição do usuário
  contendo informações do usuário e o token JWT

  23.5 Após isto, defino a rota que vai acessar o SessionController

  23.6 Após criar a rota, testo a rota com o Insomnia

  23.7 Separo as configurações de md5 e data de expiração do token
  num arquivo auth.js na pasta config

Aula - Middleware de autenticação (nova feature:  Bloqueio acesso de usuário
caso ele tente acessar alguma rota sem estar logado)
24. Criamos uma pasta middlewares no diretorio app
25. Dentro da pasta middlewares, criamos um middleware de autenticação auth.js
    Lembrar que o token está no header da requisição. Pode ser inserido de dois jeitos:
    1- No header com cabeçalho 'Authorization' e valor 'Bearer codigo_token'
    ou
    2- na aba Auth, seleciona tipo Bearer token e colocar o token desejado.

26. Primeiramente, o nosso middleware busca o token gerado
27. Importamos o jsonwebtoken e o arquivo de authConfig para desencriptar o token recebido.
    Usaremos o metodo jwt.verify para decriptar e verificar se o token é válido.
    Além disso, usamos o promisify para usar o metodo async do jwt.verify
28. Se o usuario estiver autenticado, incluimos o ID dele na requisição,
  assim o metodo update co controller pode ter acesso ao ID do usuário.

Aula - Update de usuário (feat: Edição do cadastro dum usuário)

Aula - Validação de dados de entrada (feat)
29. Utilizaremos a biblioteca 'yup' para validar os campos do corpo da requisição.
  Instalamos a biblioteca:
    yarn add yup

  29.1 Começamos validando a requisição da criação de usuário.
  29.2 Depois aplicamos a validação à requisição de edição do usuário
  29.3 Também pode aplicar a validação na sessão do usuário


---------------------------------------------------------------------
Modulo 03

Aula - Configurando multer (feature de upload de arquivos)

1. multipart/form-data é o formato que suporta o envio de arquivos numa requisição
  O Multer é uma das bibliotecas que lida com esse tipo de corpo na requisição:
  yarn add multer

  1.1 Criamos uma pasta temp e temp/uploads onde ficarão todos os uploads que forem feitos
  para a aplicação.

  1.2 Dentro de src/config criamos o arquivo multer.js onde ficará a configuração de upload de arquivos
  Adicionamos um codigo unico pra cada imagem e contatenamos com a extensao do arquivo enviado pelo usuário

  1.3 Criamos o middleware de upload (const upload = multer(multerConfig))

  1.4 Criamos a rota '/files' tipo POST para upload de arquivos, adicionamos o middleware
  upload.single('file') para tratar o upload de apenas 01 arquivo por vez
  ('files' é o nome do campo do arquivo na requisição);

-----------------------

Aula - Avatar do usuário

As informações retornadas pelo multer que importam são o antigo nome e o novo nome do aquivo
2.1 Criamos um controller para tratar dos arquivos recebidos: FileController.js

2.2 Criamos uma tabela para o FileController salvar a referencia das imagens no banco de dados
por meio de uma migration do sequelize (tabela files):
  yarn sequelize migration:create --name=create-files

  Após editar a migration, executamos-la:
  yarn sequelize db:migrate

2.3 Criamos o Model: File.js

2.4 Importamos o model File no Loader de models em database/index.js

2.5 Após isto, podemos importar nosso model File no FileController e implementamos o
código para persistir a referencia no bd e retornamos a referencia ao cliente, testamos
o resultado com insomnia

2.6 Resta fazer o relacionamento das tabelas de users e files para que o usuário
possa ser associado ao seu respectivo avatar. Precisamos adicionar um campo novo
na tabela de usuários, para isso criamos uma nova migration:
  yarn sequelize migration:create --name=add-avatar-field-to-users

  Após impletermanos a migration, podemos executá-la:
    yarn sequelize db:migrate

2.7 Criamos o relacionamento no model de User com o model de File,
entre os campos avatar_id (User) e id (File), usando o metodo associate no model User.
Após isto, chamamos o método no Loader de models.

-----------------------

Aula - Listagem de prestadores de serviços

3.1 Criação da rota('/providers') para listar prestadores de serviços e
criamos um controller ProviderController.js para lidar especificamente com
prestadores de serviços (lembrando que um provider também é um User, mas por ser especifico
para provider (funcionalidades, caracteristicas próprias, etc) é interessante criar
uma entidade para provider). O ProviderController também manipula o model User.

3.2 Configuramos o express para servir arquivos estáticos via um middleware no App.js

-----------------------

Aula - Migration e Model de agendamento

Descrição: Um usuario pode realizar agendamentos em serviços. Um serviço é disponibilizado por um
          provedor de serviços. Um agendamento possui uma data de criação e quando será o atendimento.
          Quando um agendamento for cancelado, deve ser registrado a data e hora de cancelamento.
          Quando um usuario ou provedor de serviços for excluido, deve se manter o historico de agendamento.

4.1 A tabela de agendamento armazena o registro dos agendamentos que um usuario possui com
cada prestador de servico. Iniciamos criando a migration de agendamentos (appointments):
  yarn sequelize migration:create --name=create-appointments

  Também realizamos 02 relacionamentos da tabela appointment com a tabela users:
    - Um relacionamento para indicar qual o usuario que esta agendando o serviço;
    - Um relacionameto para indicar qual o usuario (provider) que esta provend o serviço.

  Após configurarmos a migration, executamos-a:
    yarn sequelize db:migrate

4.2 Criação do model de Agendamento:
  4.2.1 Criamos o model Appointment.js

  4.2.2 Implementamos o relacionamento por meio do metodo associate.

  4.2.3 Adicionamos o model de Agendamento no Loader de models.

-----------------------

Aula - Agendamento de serviço (feature)

5.1 Iniciamos criando um controller AppointmentController e a rota para um usuario
poder agendar um serviço com um prestador de serviço. Para criar um agendamento é necessário
o provider_id e a data do agendamento (enviar via insmonia)

5.2 Criamos o schema de validação

5.3 Implementamos o método de agendamento (AppointmentController.store)

-----------------------

Aula - Validações de agendamento

6.1 Duas validações adicionais na criação de um agendamento:
  6.1.1 [X] Verificar se a data de agendamento é válida, ou seja, se é uma data futura,
  além disso o agendamento é feito por hora (por exemplo: 08:00 é válido, 8:30 é inválido).
  6.1.2 [X] Verificar se a data de agendamento já está sendo utilizada pelo prestador de serviço.

  Para isso precisamos utilizar uma biblioteca para lidar com datas dentro do node,
  utilizaremos a date-fns (o @next é equivalente ao beta da biblioteca):
    yarn add date-fns@next

-----------------------

Aula - Listando agendamentos do usuário (feature)

7.1 Criamos a rota get.('appointments') e implementamos o método index no AppointmentController
para listar os usuários.

-----------------------

Aula - Aplicando paginação de agendamentos do usuário (chore)

8.1 Configuramos o parametros de query para paginação no insomnia

-----------------------

Aula - Listando agendamentos do prestador de serviços (feature)

Cenario: Quando o prestador de serviços acessa o serviço, o sistema deve apresentar um painel
        com todos os agendamentos para o dia (diferente do usuário que é paginado).

9.1 O ScheduleController é responsável por tratar as requisições de agendamento do
provedor de serviços, criamos a rota associada ao metodo ScheduleController.index
e criamos a consulta no insomnia.
  - É preciso verificar se o usuário logado é um prestador de serviço.
  - O query param enviado será o parametro 'date' que corresponde ao dia em que o
  provedor de serviços deseja consultar a lista de agendamentos ecistentes, o valor
  default para o date é o dia atual.

-----------------------

Aula - Configurando mongoDB

10.1 Utilizaremos o banco de dados não relacional MongoDB e o ODM Mongoose para
manipular as informações armazenadas no mongo.
  - Instalamos a imagem docker do mongo:
    docker run --name mongo_gobarber -p 27017:27017 -d -t mongo

  - Instalamos o mongoose:
    yarn add mongoose

10.2 A configuração do mongoose também ficará no arquivo database/index.js

-----------------------

Aula - Notificando novos agendamentos (feature)

Cenario: O sistema envia uma notificação para o prestador de serviço toda vez que
        ele receber um novo agendamento. As notificações serão armazenadas dentro
        do MongoDB (Por quê usar o mongo pra isso? Por que os dados armazenados
        possuem poucos relacionamentos, precisa apenas saber as informações do
        usuario e do prestador de serviço, salvando o estado atual das suas
        informações e não suas referências (parecido com o que o discord faz)).
        A notificação é criada após um usuário realizar um agendamento com um prestador
        de serviços (no AppointmentController).

11.1 Criamos o schema de agendamentos.
PS: Com o mongo não precisamos criar migrations, nem importar/inicializar o model
no loader de models como fazemos com o banco relacional. Podemos importa o schema
diretamente no local desejado e utilizá-lo.

-----------------------

Aula - Listando notificações do usuário (prestador de serviço)

chore: Criar rota para listar notificações do prestador de serviço.
      - A rota (funcionalidade) só deve ser acessada por prestadores de serviços.
      - As notificações devem ser ordenadas da mais recente para a mais antiga.

-----------------------

Aula - Marcar notificações como lida (prestador de serviço)

chore: Marcar uma notificação como lida

Cenário: O provedor de serviços acessou o sistema, verificou as notificações e
        clicou no botão de marcar notificação como lida.
        - O sistema deve verificar se o usuário é um provedor de serviço

-----------------------

Aula - Cancelamento de agendamento

chore: Cancelamento de agendamento

Cenario: O usuário deseja cancelar um agendamento (o provedor de serviços não
pode cancelar um agendamento de um usuario).
  [X] O usuário só pode cancelar o agendamento até 02 horas antes do horário marcado.
  [X] O id do agendamento a ser cancelado é enviado como route params.
  [X] O sistema deve verificar se o agendamento pertence ao usuário logado.
  Caso não pretença, O sistema deve retornar uma mensagem de erro informando
  que o usuário não tem permissão para cancelar o agendamento.
  [X] O sistema deve registrar a data em que o agendamento foi cancelado.

Question: - Na listagem de notificações, uma notificação cancelada deve ser exibida?
          - Um prestador de serviço pode cancelar um atendimento de um usuário?
          - feature-request: O sistema deve notificar usuário/prestador de serviço
          quando um agendamento for cancelado?

12.1 Foi criado a rota delete('appointments') para o usuário realizar o cancelamento do
agendado.

-----------------------

Aula - Configurando nodemailer

Cenario: O usuario cancelou um atendimento, o sistema deve notificar o prestador
        de serviço via email.

13.1 Para enviar emails utilizaremos o Nodemailer (módulo para envio de email com NodeJS),
que pode ser instalado usando o yarn:
  yarn add nodemailer

  - Existem vários serviços de email, como Gmail, Amazon SES, Mailgun, Sparkpost, Mandril (Mailchimp), etc
  aqui utilizaremos o Mailtrap que funciona apenas em ambiente de desenvolvimento!

13.2 Criamos um arquivo de configuracao: config/mail.js e incluimos a configuração do mailtrap

13.3 Criou uma pasta src/lib que contém configurações de serviços externos da aplicação, como
o envio de emails. Crio a classe Mail e importo a configuração de email criada em config/mail.js
Algumas estrategias de envio de email não precisam de autenticação por isso o teste de nulo na classe.

13.4 Após configurar a classe de envio de email, podemos importá-lo no AppointmentController
onde será utilizado no método delete o qual é responsavel por realizar o cancelamento de agendamentos.

-----------------------

Aula - Configurando templates de e-mail

chore: configurando templates de e-mail

14.1 Configuraremos templates engines pra email, utilizaremos o handlebars e instalamos
dois modulos:
  yarn add express-handlebars nodemailer-express-handlebars

  Sobre a pasta de view/emails:
  - Os partials são arquivos que pode implementar e incluir dentro de emails (tipo um componente);

-----------------------

Aula - Configurando filas/background jobs com redis
Cenario: O cliente cancela um agendamento. O sistema deve enviar um email ao prestador
de serviço informando sobre o cancelamento e então retornar uma resposta ao cliente
informando sucesso no cancelamento.
  O problema é que o envio de email leva um tempo alto e o usuário aguardaria a
resposta do cancelamento durante esse periodo. Podemos utilizar filas para gerenciar
o serviço de envio de email em background.
  - Cada serviço que executa trabalhos em brackground tem sua própria fila.

chore: Configurando filas com redis

15.1 Instalamos a imagem docker do redis:
  docker run --name redis_gobarber -p 6379:6379 -d -t redis:alpine

15.2 Instalamos o Bee queue o qual é um gerenciador de filas/tarefas para o NodeJS
usando o Redis:
  yarn add bee-queue

15.3 Criamos um arquivo lib/Queue.js e criamos uma pasta app/jobs para armazenar
todos os trabalhos que executam em segundo plano na aplicação. O Queue é como se
fosse um job loader (semelhante ao model loader).

15.4 Dentro de app/jobs, criamos nosso primeiro job: CancellationMail.js
Cada job precisa de uma chave única.

15.6 Criamos a configuração do redis em config/redis.js, importamos a configuração
do Redis no loader de jobs, e repassamos a configuracao do Redis ao Bee queue.

15.7 no AppointmentController substituimos a importação do modulo Mail pelo de Queue

15.8 Criamos um arquivo src/queue.js responsável por inicializar o gerenciador de filas
e adicionamos o script "queue": "nodemon src/queue.js" no package.json para que o
sucrase interprete a sintaxe ES5+

